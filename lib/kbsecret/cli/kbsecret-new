#!/usr/bin/env ruby
# frozen_string_literal: true

require "kbsecret"
require "abbrev"
require "tty-prompt"

include KBSecret

# allows for abbreviated types (e.g., `kbsecret new env ...`)
TYPE_ALIASES = Hash.new { |_, k| k }.update(Abbrev.abbrev(Record.record_types)).freeze

cmd = CLI.create do |c|
  c.slop do |o|
    o.banner = <<~HELP
      Usage:
        kbsecret new [options] <type> <label>
        kbsecret new [options] --args <type> <label> <fields>
    HELP

    o.string "-s", "--session", "the session to contain the record", default: :default
    o.bool "-f", "--force", "force creation (ignore overwrites, etc.)"
    o.bool "-a", "--args", "use trailing arguments as fields, even with a tty"
    o.bool "-e", "--echo", "echo input to tty (only affects interactive input)"
    o.bool "-G", "--generate", "generate secret fields (interactive only)"
    o.string "-g", "--generator", "the generator to use for secret fields",
             default: :default
    o.bool "-x", "--terse", "read fields from input in a terse format"
    o.string "-i", "--ifs", "separate terse fields with this string", default: CLI.ifs
  end

  c.dreck do
    string :type
    string :label
    list :string, :fields if c.opts.args?
  end

  c.ensure_generator!
  c.ensure_type! :argument
  c.ensure_session!
end

type          = cmd.args[:type]
label         = cmd.args[:label]
resolved_type = TYPE_ALIASES[type]

if cmd.session.record?(label) && !cmd.opts.force?
  cmd.die "Refusing to overwrite an existing record without --force."
end

if cmd.opts.generate?
  generator = cmd.guard { Generator.new cmd.opts[:generator] }
end

fields = if ($stdin.tty? && !cmd.opts.args?) || cmd.opts.terse?
           prompt = TTY::Prompt.new
           klass = Record.class_for(resolved_type)

           if cmd.opts.terse?
             fields = STDIN.read.chomp.split cmd.opts[:ifs]
           else
             klass.external_fields.map do |field|
               if cmd.opts.generate? && klass.sensitive?(field)
                 generator.secret
               else
                 prompt.ask "#{field.capitalize}?",
                            echo: !klass.sensitive?(field) || cmd.opts.echo?
               end
             end
           end
         else
           cmd.warn <<~WARNING
             Argument input is dangerous and deprecated, and will be removed by 1.0.
           WARNING

           cmd.args[:fields]
         end

cmd.guard { cmd.session.add_record(resolved_type, label, *fields) }
