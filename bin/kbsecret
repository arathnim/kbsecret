#!/usr/bin/env ruby

require "kbsecret"

BUILTIN_CMDS = [
  "help",
  "version",
  "commands",
  "types",
].freeze

EXT_PATHS = ENV["PATH"].split(File::PATH_SEPARATOR).map do |path|
  Dir[File.join(path, "kbsecret-*")]
end.flatten.uniq.freeze

EXT_CMDS = EXT_PATHS.map do |c|
  File.basename(c, File.extname(c)).sub!("kbsecret-", "")
end.freeze

ALIASES = Hash.new { |_, k| k }.update({
  "--help" => "help",
  "-h" => "help",
}).freeze

ALL_CMDS = (ALIASES.keys + BUILTIN_CMDS + EXT_CMDS).freeze

def external?(cmd)
  EXT_CMDS.include?(cmd)
end

def builtin?(cmd)
  BUILTIN_CMDS.include?(cmd)
end

def alias?(cmd)
  ALIASES.keys.include?(cmd)
end

def normalize(cmd)
  ALIASES[cmd]
end

def expand(cmd)
  return cmd if alias?(cmd) || builtin?(cmd)
  "kbsecret-#{cmd}"
end

def help(*args)
  command = normalize args.shift
  if command.nil?
    puts <<~EOS
      Usage:
        kbsecret <command> <args ...>

      Available commands:
        #{ALL_CMDS.join(", ")}

      More more information about a particular command, try:
        kbsecret help <command>
    EOS
  else
    if builtin? command
      send "#{command}_help"
    else
      # XXX: this probably doesn't make sense, since not every user command
      # will implement --help.
      system expand(command), "--help"
    end
  end
end

# lol
def help_help
  puts <<~EOS
    Prints brief help for the given command.

    Usage:
      kbsecret help <command>

    For a list of all commands, see:
      kbsecret help
  EOS
end

def version(*args)
  puts <<~EOS
    kbsecret version #{KBSecret::VERSION}.
  EOS
end

def version_help
  puts <<~EOS
    Prints kbsecret's version.

    Usage:
      kbsecret version
  EOS
end

def commands
  puts ALL_CMDS.join("\n")
end

def commands_help
  puts <<~EOS
    Prints a list of all available kbsecret commands.

    Usage:
      kbsecret commands
  EOS
end

def types
  puts KBSecret::Record.record_types.join("\n")
end

def types_help
  puts <<~EOS
    Prints a list of all available kbsecret record types.

    Usage:
      kbsecret types
  EOS
end

command = normalize(ARGV.shift || "help")

if builtin? command
  send command, *ARGV
elsif external? command
  system expand(command), *ARGV
else
  STDERR.puts "Fatal: Unknown command: '#{command}'."
end
