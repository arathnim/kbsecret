#!/usr/bin/env ruby
# frozen_string_literal: true

require "kbsecret"
require "abbrev"
require "tty-prompt"

# allows for abbreviated types (e.g., `kbsecret new env ...`)
TYPE_ALIASES = Abbrev.abbrev(KBSecret::Record.record_types).freeze

opts = KBSecret::CLI.slop do |o|
  o.banner = <<~EOS
    Create a new secret record.

    Usage:
      kbsecret new [--session <name>] [--force] <type> <label>
      kbsecret new [--session <name>] [--force] <type> <label> <fields>

    Examples:
      kbsecret new login gmail
      kbsecret new environment foo-api
  EOS

  o.string "-s", "--session", "the session name", default: :default
  o.bool "-f", "--force", "force creation (ignore overwrites, etc.)"
  o.bool "-i", "--interactive", "input fields interactively, even without a tty"
  o.bool "-e", "--echo", "echo input to tty (only affects interactive input)"
end

session = KBSecret::CLI.ensure_session opts[:session]

KBSecret::CLI.die "Not enough arguments." if opts.args.size < 2

type, label = opts.args.shift 2

resolved_type = TYPE_ALIASES[type]

if session.record?(label) && !opts.force?
  KBSecret::CLI.die "Refusing to overwrite an existing record without --force."
end

unless KBSecret::Record.type?(resolved_type)
  KBSecret::CLI.die <<~EOS
    Unknown record type: '#{type}'.
    Known types are: #{KBSecret::Record.record_types.join(", ")}.
  EOS
end

fields = []

if $stdin.tty? || opts.interactive?
  prompt = TTY::Prompt.new
  klass = KBSecret::Record.class_for(resolved_type)
  klass.data_fields.each do |field|
    fields << prompt.ask("#{field.capitalize}?", echo: opts.echo?)
  end
else
  fields = opts.args
end

begin
  session.add_record(resolved_type, label, *fields)
rescue => e
  KBSecret::CLI.die "#{e}."
end
