#!/usr/bin/env ruby
# frozen_string_literal: true

require "kbsecret"
require "abbrev"
require "tty-prompt"

# allows for abbreviated types (e.g., `kbsecret new env ...`)
TYPE_ALIASES = Abbrev.abbrev(KBSecret::Record.record_types).freeze

cmd = KBSecret::CLI.new do
  slop do |o|
    o.banner = <<~EOS
      Create a new secret record.

      Usage:
        kbsecret new [options] <type> <label>
        kbsecret new [options] --args <type> <label> <fields>

      Examples:
        kbsecret new login gmail
        kbsecret new environment foo-api
    EOS

    o.string "-s", "--session", "the session name", default: :default
    o.bool "-f", "--force", "force creation (ignore overwrites, etc.)"
    o.bool "-a", "--args", "use trailing arguments as fields, even with a tty"
    o.bool "-e", "--echo", "echo input to tty (only affects interactive input)"
  end

  dreck do
    string :type
    string :label
    list :string, :fields
  end
end

session = KBSecret::CLI.ensure_session cmd.opts[:session]

type          = cmd.args[:type]
label         = cmd.args[:label]
resolved_type = TYPE_ALIASES[type]

if session.record?(label) && !cmd.opts.force?
  KBSecret::CLI.die "Refusing to overwrite an existing record without --force."
end

fields = if $stdin.tty? && !cmd.opts.args?
           prompt = TTY::Prompt.new
           klass = KBSecret::Record.class_for(resolved_type)
           klass.data_fields.map do |field|
             prompt.ask("#{field.capitalize}?", echo: cmd.opts.echo?)
           end
         else
           cmd.args[:fields]
         end

begin
  session.add_record(resolved_type, label, *fields)
rescue => e
  KBSecret::CLI.die "#{e}."
end
