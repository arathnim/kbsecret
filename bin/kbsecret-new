#!/usr/bin/env ruby
# frozen_string_literal: true

require "kbsecret"
require "abbrev"
require "tty-prompt"

include KBSecret

# allows for abbreviated types (e.g., `kbsecret new env ...`)
TYPE_ALIASES = Hash.new { |_, k| k }.update(Abbrev.abbrev(Record.record_types)).freeze

cmd = CLI.create do |c|
  c.slop do |o|
    o.banner = <<~EOS
      Usage:
        kbsecret new [options] <type> <label>
        kbsecret new [options] --args <type> <label> <fields>
    EOS

    o.string "-s", "--session", "the session to contain the record", default: :default
    o.bool "-f", "--force", "force creation (ignore overwrites, etc.)"
    o.bool "-a", "--args", "use trailing arguments as fields, even with a tty"
    o.bool "-e", "--echo", "echo input to tty (only affects interactive input)"
  end

  c.dreck do
    string :type
    string :label
    list :string, :fields if c.opts.args?
  end

  c.ensure_type! :argument
  c.ensure_session!
end

type          = cmd.args[:type]
label         = cmd.args[:label]
resolved_type = TYPE_ALIASES[type]

if cmd.session.record?(label) && !cmd.opts.force?
  cmd.die "Refusing to overwrite an existing record without --force."
end

fields = if $stdin.tty? && !cmd.opts.args?
           prompt = TTY::Prompt.new
           klass = Record.class_for(resolved_type)
           klass.data_fields.map do |field|
             prompt.ask "#{field.capitalize}?",
                        echo: !klass.sensitive?(field) || cmd.opts.echo?
           end
         else
           cmd.args[:fields]
         end

begin
  cmd.session.add_record(resolved_type, label, *fields)
rescue => e
  cmd.die "#{e}."
end
