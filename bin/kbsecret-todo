#!/usr/bin/env ruby
# frozen_string_literal: true

require "kbsecret"
require "slop"

opts = Slop.parse suppress_errors: true do |o|
  o.banner = <<~EOS
    Manage 'to do' records.

    Usage:
      kbsecret todo <start|suspend|complete> <label>

    Examples:
      kbsecret todo start unit-tests
      kbsecret todo suspend laundry
      kbsecret todo complete shopping
  EOS

  o.string "-s", "--session", "the session name", default: :default

  o.on "-h", "--help" do
    puts o
    exit
  end

  o.on "--introspect-flags" do
    subcmds = %w[start suspend complete]
    comp = o.options.flat_map(&:flags) + subcmds
    puts comp.join "\n"
    exit
  end
end

sess_name = opts[:session]

unless KBSecret::Config.session? sess_name
  abort "Fatal: Unknown session: '#{sess_name}'."
end

session = KBSecret::Session.new label: sess_name
command, label = opts.args.shift 2

abort("Fatal: Missing subcommand.") unless command && label

todo_records = session.records :todo
todo = todo_records.find { |r| r.label == label }

abort("Fatal: No such todo record.") unless todo

case command
when "start"
  abort("That task is already started!") if todo.started?
  todo.start!
  puts "#{todo.label}: '#{todo.todo}' marked as started at #{todo.start}"
when "suspend"
  abort("That task is already suspended!") if todo.suspended?
  todo.suspend!
  puts "#{todo.label}: '#{todo.todo}' marked as suspended at #{todo.stop}"
when "complete"
  abort("That task is already completed!") if todo.completed?
  todo.complete!
  puts "#{todo.label}: '#{todo.todo}' marked as completed at #{todo.stop}"
else
  abort("Fatal: Unknown action: #{command}.")
end
