#!/usr/bin/env ruby

require "kbsecret"
require "slop"

opts = Slop.parse suppress_errors: true do |o|
  o.banner = <<~EOS
    Retrieve login records.

    Usage:
      kbsecret login [--session <name>] <label1 label2 ...>

    Examples:
      kbsecret login --terse --ifs "*" gmail
      kbsecret login gmail netflix
  EOS

  o.bool "-a", "--all", "retrieve all login records, not just listed ones"
  o.bool "-x", "--terse", "output in label:username:password format"
  o.string "-i", "--ifs", "separate terse fields with this string", default: ":"
  o.string "-s", "--session", "the session name", default: :default

  o.on "-h", "--help" do
    puts o
    exit
  end

  o.on "--introspect-flags" do
    puts o.options.flat_map { |o| o.flags }.join "\n"
    exit
  end
end

sess_name = opts[:session]

unless KBSecret::Config.session? sess_name
  abort "Fatal: Unknown session: '#{sess_name}'."
end

session = KBSecret::Session.new label: sess_name

login_records = session.records :login

if opts.all?
  selected_records = login_records
else
  selected_labels = opts.args.uniq

  # instead of complaining about nonexistent records, just ignore them
  selected_records = selected_labels.map do |l|
    login_records.find { |r| r.label == l }
  end.compact
end

selected_records.each do |record|
  if opts.terse?
    fields = [:label, :username, :password].map { |m| record.send(m) }
    puts fields.join(opts[:ifs])
  else
    puts <<~EOS
      Label: #{record.label}
      \tUsername: #{record.username}
      \tPassword: #{record.password}
    EOS
  end
end
